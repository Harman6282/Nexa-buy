generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  imageUrl String?
  role     Role    @default(USER)

  cart      Cart[]
  address   Address[]
  order     Order[]
  wishlist  Wishlist[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

model Product {
  id          String @id @default(uuid())
  name        String
  slug        String @unique
  description String
  price       Float
  discount    Float  @default(0)
  brand       String

  images       Image[]
  cartItem     CartItem[]
  variants     ProductVariant[]
  orderItem    OrderItem[]
  wishlist     Wishlist[]
  // Category relation (many-to-one)
  category     Category         @relation(fields: [categoryName], references: [name])
  categoryName String           @default("all")

  ratings    Float @default(0)
  numReviews Int   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id        String      @id @default(uuid())
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  size      String
  stock     Int
  OrderItem OrderItem[]
  cartItem  CartItem[]
}

model Image {
  id        String  @id @default(uuid())
  publicId  String?
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Cart {
  id     String     @id @default(uuid())
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String     @unique
  items  CartItem[]
}

model CartItem {
  id        String         @id @default(uuid())
  cartId    String
  cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int            @default(1)
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, variantId])
}

model Address {
  id        String   @id @default(uuid())
  lineOne   String
  lineTwo   String?
  city      String
  state     String
  pincode   String
  country   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                String             @id @default(uuid())
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  items             OrderItem[]
  razorpayOrderId   String             @unique
  razorpayPaymentId String?
  razorpaySignature String?
  paymentStatus     OrderPaymentStatus @default(PENDING)

  total     Float
  status    OrderStatus @default(PENDING)
  address   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model OrderItem {
  id        String         @id @default(uuid())
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product        @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
  price     Float
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
}

model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

enum OrderPaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}
