// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  imageUrl String?
  role     Role    @default(USER)

  cart    Cart[]
  address Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Product {
  id          String @id @default(uuid())
  name        String
  slug        String @unique
  description String
  price       Float
  discount    Float  @default(0) // percentage
  stock       Int    @default(0)
  brand       String

  images   Image[]
  cartItem CartItem[]

  // Category relation (many-to-one)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ratings    Float @default(0)
  numReviews Int   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String  @id @default(uuid())
  publicId  String
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products Product[]
}

model Cart {
  id     String     @id @default(uuid())
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
  items  CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String   @id @default(uuid())
  lineOne   String
  lineTwo   String?
  city      String
  pincode   String
  country   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
